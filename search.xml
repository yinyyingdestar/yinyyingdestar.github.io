<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2024/05/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><a href="%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="搭建历程"><a href="#搭建历程" class="headerlink" title="搭建历程"></a>搭建历程</h1><p>(历时整整两天~ _ ~)</p>
<h2 id="博客展示"><a href="#博客展示" class="headerlink" title="博客展示"></a>博客展示</h2><p>本人博客展示<a href="https://yinyyingdestar.github.io/">无常学java</a><br>十分粗糙,任待完善</p>
<h2 id="博客简介"><a href="#博客简介" class="headerlink" title="博客简介"></a>博客简介</h2><h3 id="运用技术简介"><a href="#运用技术简介" class="headerlink" title="运用技术简介"></a>运用技术简介</h3><p>该博客为静态博客,基于Hexo框架搭建,博主为大学牲没有米,所以将它部署在Github Pages,然后为了能同大家交流方便,我会在CSDN上同步发布,该博客搭建借鉴于<a href="http://t.csdnimg.cn/u459k">从零开tong始免费搭建自己的博客</a></p>
<h3 id="写blog动机"><a href="#写blog动机" class="headerlink" title="写blog动机"></a>写blog动机</h3><p>感觉能在自己学习编程得过程中留下一些足迹很有意义,还能记录顺便监督自己的编程学习.同时,还能同大家分享踩过的一些坑,总之很期待,一起加油吧!<br>(本人目前学习java)</p>
]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/2024/05/21/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="java集合"><a href="#java集合" class="headerlink" title="java集合"></a>java集合</h1><p>体系图一览</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/IMG_20240520_230540.jpg" alt="IMG_20240520_230540"></p>
<h2 id="集合相对于数组的优点"><a href="#集合相对于数组的优点" class="headerlink" title="集合相对于数组的优点"></a>集合相对于数组的优点</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/IMG_20240520_230509.jpg" alt="IMG_20240520_230509"></p>
<p>实际开发根据业务逻辑选择</p>
<ol>
<li>一组对象(单列)</li>
<li>一组键值对(双列)</li>
</ol>
<h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><h3 id="List-允许重复"><a href="#List-允许重复" class="headerlink" title="List: 允许重复"></a>List: 允许重复</h3><h4 id="LinkList-ArrayList-Vector"><a href="#LinkList-ArrayList-Vector" class="headerlink" title="LinkList&#x2F;ArrayList&#x2F;Vector"></a>LinkList&#x2F;ArrayList&#x2F;Vector</h4><ol>
<li>增删多:用 LinkList (底层维护了一个双向链表), 通过改变pre和next指向即可实现Node的增删;</li>
<li>改查多:用ArrayList&#x2F;Vector(底层结构是可变数组), 进一步选择</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20094107.png" alt="屏幕截图 2024-05-21 094107"></p>
<h3 id="Set-不允许重复"><a href="#Set-不允许重复" class="headerlink" title="Set: 不允许重复"></a>Set: 不允许重复</h3><h4 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1. HashSet"></a>1. HashSet</h4><ol>
<li>无序: HashSet[底层是HashMap,维护了一个哈希表(数组+链表+红黑树)]<br> 添加元素步骤:<ol>
<li>先得到hash值转换成索引值,找到对应储存位置</li>
<li>没有元素直接加入, 有则调用equals比较</li>
<li>hashcode()+equals()均可被重写, 由程序猿自己制定比较规则</li>
<li>扩容机制:<br>  <img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20095626.png" alt="屏幕截图 2024-05-21 095626"></li>
</ol>
</li>
</ol>
<h4 id="2-TreeSet"><a href="#2-TreeSet" class="headerlink" title="2.TreeSet"></a>2.TreeSet</h4><ol start="2">
<li><p>排序: TreeSet</p>
<ol>
<li>底层为MapSet(key即为穿入的对象, value是PRESENRT占位符)        </li>
<li>创建TreeSet时, 使用无参构造器则使用默认的Comparator, 亦可重写比较器, 制定比较规则</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"><span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="comment">//下面 调用 String 的 compareTo 方法进行字符串大小比较</span></span><br><span class="line"><span class="comment">//如果要求加入的元素，按照长度大小排序</span></span><br><span class="line"><span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line"><span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-LinkedHashSet"><a href="#3-LinkedHashSet" class="headerlink" title="3. LinkedHashSet"></a>3. LinkedHashSet</h4><ol start="3">
<li><p>插入和取出顺序一致: LinkedHashSet(维护了一个(数组[存放]+双向链表[维持顺序]))</p>
<h5 id="去重机制比较"><a href="#去重机制比较" class="headerlink" title="去重机制比较"></a>去重机制比较</h5><ol>
<li>HashSet：hashcode()得到hash值从而得到索引,  用equals()便利比较</li>
<li>用Comparator实现的compare方法比较, 该方法返回正数,0, 负数, 为0表示重复, 不添加</li>
</ol>
</li>
</ol>
<h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h3 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h3><ol>
<li><p>键无序: HashMap</p>
<ol>
<li><p>底层是:哈希表(JDK7: 数组+链表)(hJDK8: 数组+链表+红黑树)</p>
</li>
<li><p>扩容机制: </p>
<ol>
<li><p>第1次添加，则需要扩容tabl容量为16，临界值(threshold)为12(16*0.75)</p>
</li>
<li><p>以后再扩容，则需要扩容tab1e容量为原来的2倍（32)，临界值为原来的2倍,即24</p>
</li>
</ol>
<p>   以次类推.</p>
<ol start="3">
<li>在Java8中，如果一条链表的元素个数超过TREEIFY THRESHOLD（默认是8），并且table的大小&gt;&#x3D; MIN_TREEIFY_CAPACITY（默认64)，就会进行树化（红黑树)</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="2-TreeMap"><a href="#2-TreeMap" class="headerlink" title="2.TreeMap"></a>2.TreeMap</h4><ol start="2">
<li>键排序: TreeMap(定制排序, 原理见TreeSet)</li>
</ol>
<h4 id="3-LinkedhashMap"><a href="#3-LinkedhashMap" class="headerlink" title="3.LinkedhashMap"></a>3.LinkedhashMap</h4><ol start="3">
<li>键插入和取出的顺序一致:LinkedhashMap(原理见LinkedhashSet)</li>
</ol>
<h4 id="4-Properties"><a href="#4-Properties" class="headerlink" title="4.Properties"></a>4.Properties</h4><ol start="4">
<li><p>读取文件: Properties</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20175747.png" alt="屏幕截图 2024-05-21 175747"></p>
</li>
</ol>
<h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><ol>
<li>先取出 所有的 Key , 通过 Key 取出对应的 Value, 再进行遍历<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br></pre></td></tr></table></figure></li>
<li>把所有的 values 取出, 这里可以使用所有的 Collections 使用的遍历方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通过 EntrySet 来获取 k-v(以增强for循环为例)<br> 原理: Map里面的Node(Node实现了Map.Entry&lt;K, V&gt;)转换成Entry, 再放到EntrySet里面去,<br> 然而Map.Entry提供了方法getKey()和getValue()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line"><span class="comment">//(1) 增强 for</span></span><br><span class="line">System.out.println(<span class="string">&quot;----使用 EntrySet 的 for 增强(第 3 种)----&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line"><span class="comment">//将 entry 转成 Map.Entry</span></span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><ol>
<li><p>Collections是一个操作Set, List, Map等集合的工具类</p>
</li>
<li><p>提供了一系列<strong>静态的</strong>方法对集合元素进行排序, 查询等</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20181744.png" alt="屏幕截图 2024-05-21 181744"><br>   <img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20181800.png" alt="屏幕截图 2024-05-21 181800"></p>
<h2 id="练习题踩坑"><a href="#练习题踩坑" class="headerlink" title="练习题踩坑"></a>练习题踩坑</h2><p>(结果输出4个对象)</p>
<ol>
<li>hashcode()+equals()均被重写, 因此只用根据id 和name判断</li>
<li>p1.name更改后(p1为引用数据类型, 因此set中的p1也会发生改变), 在经hashcode()计算后,在数组中位置发生变化(假设变到索引为3的位置), 因此无法删除p1</li>
<li>set.add(new Person(“1001”, “CC”)), 经过hashcode()计算后在索引为3的位置, 自然而然可以加入</li>
<li>set.add(new Person(“1001”, “AA”)),经过计算后在索引为1的位置,与修改后的p1不相同, 因而任可以加入<br><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-21%20181640.png" alt="屏幕截图 2024-05-21 181640"></li>
</ol>
<blockquote>
<p>本文截图均来自于<a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&vd_source=3f176702ea98369f18fc10e9013aa770">【零基础 快速学Java】韩顺平 零基础30天学会Java</a></p>
</blockquote>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>学java(基础)</tag>
      </tags>
  </entry>
  <entry>
    <title>java泛型</title>
    <url>/2024/05/26/java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h2><p>基本理解: 就像类是对对象的抽象, 泛型就是对类型的抽象, 其作用类似于c++的模板</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol>
<li>泛型的声明: interface接口<T>{}和类&lt;K, V&gt;{}</li>
<li>实例化: 例:  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt;strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">Iterator&lt;Customer&gt; itrator = customers.itrator();</span><br></pre></td></tr></table></figure></li>
<li>注意事项: <ol>
<li><p>以大写字母表示泛型</p>
</li>
<li><p>在给泛型制定具体类型后, 可以指定该类型或者其子类类型</p>
</li>
<li><p>泛型只能是引用类型,不能是基本数据类型比如:int, double等, 如果传入的是基本数据类型的, 会执行自动装箱</p>
</li>
<li><p>在实际开发中，我们往往简写</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><ol>
<li><p>题目:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-26%20201026.png" alt="题目"></p>
</li>
<li><p>思路:</p>
</li>
</ol>
<ol>
<li>先对传入的参数进行验证<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(emp1 <span class="keyword">instanceof</span> Employee &amp;&amp; emp2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;类型不正确..&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>先比较name<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> emp1.getName().compareTo(emp2.getName());</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3) 如果name相同, 再比较birthday, 先比较year<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">yearMinus</span> <span class="operator">=</span> year - o.getYear();</span><br><span class="line"><span class="keyword">if</span>(yearMius != <span class="number">0</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> yearMinus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4) month, day 同理</li>
</ol>
<h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><ol>
<li>基本语法: <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名&lt;T, R...&gt;&#123;...表示可以有多个泛型</span><br><span class="line">    String name;</span><br><span class="line">    R r;</span><br><span class="line">    T t;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注意细节</li>
</ol>
<ol>
<li>使用泛型的数组不能初始化, 不能确定泛型的类型, 无法开辟空间 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T[] ts = <span class="keyword">new</span> <span class="title class_">T</span>[<span class="number">8</span>];<span class="comment">//会报错</span></span><br></pre></td></tr></table></figure></li>
<li>静态的方法中不能使用类的泛型: 因为静态方法是在对象创建之前,加载类的时候进行加载</li>
<li>如果在创建对象时没有指定类型, 那就默认为Object</li>
</ol>
<h2 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h2><ol>
<li>泛型接口的类型, 在继承接口或者实现接口时确定</li>
<li>其他与泛型类类似</li>
</ol>
<h2 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h2><ol>
<li>泛型方法，可以定义在普通类中, 也可以定义在泛型类中</li>
<li>eat方法不是泛型方法, 修饰符后没有&lt;T, R…&gt; 而是使用了泛型 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(E e)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><ol>
<li>泛型不具有继承性 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();<span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>2.通配符</p>
<ol>
<li><? >: 支持任意泛型类型</li>
<li><? Extends A>: 支持A类以及A类的子类, 规定了泛型的上限</li>
<li><? super A>: 支持A类以及A类的父类, 不限于直接父类, 规定了泛型的下限</li>
</ol>
<blockquote>
<p>本文截图均来自于<a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&vd_source=3f176702ea98369f18fc10e9013aa770">【零基础 快速学Java】韩顺平 零基础30天学会Java</a></p>
</blockquote>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>学java(基础)</tag>
      </tags>
  </entry>
  <entry>
    <title>javaIO流</title>
    <url>/2024/07/12/IO%E6%B5%81/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h2><p>流是程序操作文件的一种方式, java程序与文件间输入输出通过IO流控制</p>
<h2 id="一览图"><a href="#一览图" class="headerlink" title="一览图"></a>一览图</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/IO.png" alt="IO"></p>
<h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><p>mkdir():创建一级目录<br>mkdirs():创建多级目录<br>delete():删除文件或目录</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%88%86%E7%B1%BB.png" alt="分类"><br>!!!切记关流</p>
<h2 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h2><h3 id="一览图-1"><a href="#一览图-1" class="headerlink" title="一览图"></a>一览图</h3><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E4%B8%80%E8%A7%88%E5%9B%BE.png" alt="一览图"></p>
<h3 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h3><ol>
<li>为了提高效率, 通常用字节数组来进行操作</li>
<li>(循环)read(byte&#x2F;byte[] b)读取文件, 读完返回-1; (循环)write(byte[] b, int off, int length)将数据写入文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">	System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h3><p>概念: 为了进一步提高读写效率,诞生了处理流, 拥有更强大灵活的读写功能<br>设计模式: 通过对节点流进行包装,使用修饰器设计模式(多态的动态绑定机制), 因而节点流就成为了低级模式(类似于底层)</p>
<h4 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h4><h5 id="BufferedReader-Writer"><a href="#BufferedReader-Writer" class="headerlink" title="BufferedReader&#x2F;Writer:"></a>BufferedReader&#x2F;Writer:</h5><p>(循环)readline()读取文件, 读完返回null; write()类似,newline()换行</p>
<h5 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h5><p>ObjectOutputStream 序列化保存; ObjectInputStream 反序列化读取<br>注:<br><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png" alt="注意事项"></p>
<h5 id="转换流-InputStreamReader-Writer"><a href="#转换流-InputStreamReader-Writer" class="headerlink" title="转换流(InputStreamReader&#x2F;Writer)"></a>转换流(InputStreamReader&#x2F;Writer)</h5><ol>
<li>可指定转换字符, 解决乱码</li>
<li>可将字节流转换成字符流</li>
</ol>
<h5 id="打印流-PrintStream-PrintWriter"><a href="#打印流-PrintStream-PrintWriter" class="headerlink" title="打印流(PrintStream&#x2F;PrintWriter)"></a>打印流(PrintStream&#x2F;PrintWriter)</h5><ol>
<li>只有输出流</li>
<li>默认情况下打印位置是显示器, 可更改打印位置]<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认情况</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.write(<span class="string">&quot;韩顺平,你好&quot;</span>.getBytes());</span><br><span class="line">out.close();</span><br><span class="line"><span class="comment">//改, 打印在e:\\f1.txt</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\f1.txt&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;hello~&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><ol>
<li>一种方便读取数据的类</li>
<li>用键值形式储存</li>
<li>循环读取:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//读取 mysql.properties 文件，并得到 ip, user 和 pwd</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123; <span class="comment">//循环读取</span></span><br><span class="line">	String[] split = line.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">	<span class="comment">//如果我们要求指定的 ip 值</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">&quot;ip&quot;</span>.equals(split[<span class="number">0</span>])) &#123;</span><br><span class="line">	System.out.println(split[<span class="number">0</span>] + <span class="string">&quot;值是: &quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure></li>
<li>指定读取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建 Properties 对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//3. 把 k-v 显示控制台</span></span><br><span class="line">properties.list(System.out);</span><br><span class="line"><span class="comment">//4. 根据 key 获取对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);<span class="comment">//getProperty返回string</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user2</span> <span class="operator">=</span> properties.get(<span class="string">&quot;user&quot;</span>);<span class="comment">//get返回Object</span></span><br><span class="line">System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>本文截图均来自于<a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&vd_source=3f176702ea98369f18fc10e9013aa770">【零基础 快速学Java】韩顺平 零基础30天学会Java</a></p>
</blockquote>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>学java(基础)</tag>
      </tags>
  </entry>
  <entry>
    <title>java网络编程（基础）</title>
    <url>/2024/07/19/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h1><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>两台设备之间通过网络实现数据传输, java.net包下提供了一系列类和接口</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>根据网络覆盖范围分为: 局域网, 城域网, 广域网(万维网)</p>
<h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>查看ip地址: ipconfig<br>一个字节范围是0~255</p>
<h3 id="ipv4"><a href="#ipv4" class="headerlink" title="ipv4"></a>ipv4</h3><ol>
<li>表示形式: 点分十进制 xx.xx.xx.xx</li>
<li>有4个字节</li>
<li>127.0.0.1:表示本机地址</li>
</ol>
<h3 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h3><p> 表示形式多种, 十六进制,  有16个字节</p>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%9F%9F%E5%90%8D.png" alt="域名"></p>
<h2 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.png" alt="网络通信协议"></p>
<h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><h3 id="TCP协议-传输控制协议"><a href="#TCP协议-传输控制协议" class="headerlink" title="TCP协议(传输控制协议)"></a>TCP协议(传输控制协议)</h3><ol>
<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>
<li>传输前，采用“三次握手“方式，是可靠的</li>
<li>TCP协议进行通信的两个应用进程：客户端、服务端</li>
<li>在连接中可进行大数据量的传输<br>5.传输完毕，需释放已建立的连接，效率低</li>
</ol>
<h3 id="UDP协议-用户数据协议"><a href="#UDP协议-用户数据协议" class="headerlink" title="UDP协议(用户数据协议)"></a>UDP协议(用户数据协议)</h3><ol>
<li>将数据、源、目的封装成数据包，不需要建立连接</li>
<li>每个数据报的大小限制在64K内，不适合传输大量数据</li>
<li>因无需连接，故是不可靠的</li>
<li>发送数据结束时无需释放资源（因为不是面向连接的)，速度快</li>
</ol>
<h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p>相关方法:</p>
<ol>
<li>getLocalHost: 返回计算机名和ip地址;</li>
<li>getByName: 根据指定主机名&#x2F;域名获取 ip 地址;</li>
<li>getHostName: 获取 InetAddress 对象的主机名或域名;</li>
<li>getHostAddress: 获取 InetAddress 对象的地址</li>
</ol>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol>
<li>是两台机器间通信的端点;</li>
<li>Socket允许程序把网络连接当成一个流, 数据在两个Socket间通过IO传输;</li>
<li>一般把发起通信的应用程序称为客户端, 等待通信请求的为服务端</li>
</ol>
<h2 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/netstat%20%E6%8C%87%E4%BB%A4.png" alt="netstat 指令"></p>
<h2 id="网络通信编程"><a href="#网络通信编程" class="headerlink" title="网络通信编程"></a>网络通信编程</h2><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/TCP.png" alt="TCP"></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>IO 读取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字节流</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//根据读取到的实际长度，显示内容.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符流</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//根据读取到的实际长度，显示内容.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>写入数据要设置结束标记, 字符流还要手动flush;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字节流</span></span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"><span class="comment">//字符流</span></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;hello client 字符流&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">bufferedWriter.flush();</span><br></pre></td></tr></table></figure></li>
<li>记得要关闭流和socket;</li>
<li>socket只能获取到字节流, 使用字符流需要转换;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()))</span><br><span class="line"></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br></pre></td></tr></table></figure></li>
<li>传输图片或视频时, 转换成字符读取传输, 接收写入;</li>
<li>当客户端连接到服务端后, 实际上客户端也是通过一个端口和服务端进行通讯的, 之歌端口时TCP&#x2F;IP来分配的, 是随机的</li>
</ol>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ol>
<li>类DatagramSocket 和DatagramPacket[数据包&#x2F;数据报]实现了基于UDP<br>协议网络程序;</li>
<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和<br>端口号以及接收端的IP地址和端口号</li>
</ol>
<h4 id="基本步骤-1"><a href="#基本步骤-1" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol>
<li>核心的两个类&#x2F;对象 DatagramSocket与DatagramPacket</li>
<li>建立发送端，接收端（没有服务端和客户端概念)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"><span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes();</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length,InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line">socket.send(packet);</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br></pre></td></tr></table></figure></li>
<li>发送数据前，建立数据包&#x2F;报DatagramPacket对象</li>
<li>调用DatagramSocket的发送、接收方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">socket.receive(packet);</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line"><span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br></pre></td></tr></table></figure></li>
<li>关闭DatagramSocket</li>
</ol>
<blockquote>
<p>本文截图均来自于<a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&vd_source=3f176702ea98369f18fc10e9013aa770">【零基础 快速学Java】韩顺平 零基础30天学会Java</a></p>
</blockquote>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>学java(基础)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习（题解）</title>
    <url>/2024/08/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习-题解"><a href="#算法学习-题解" class="headerlink" title="算法学习(题解)"></a>算法学习(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个整数数组<code>nums</code>，将数组中的元素向右轮转<code>k</code>个位置，其中<code> k</code> 是非负数。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右轮转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右轮转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右轮转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>
<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><ol>
<li>临时数组:  最直接的方法使用一个临时数组,复制原数组的值, 将每个元素后移<code>k%nums.length</code>位即可</li>
<li>环形旋转: 从第一个开始, 依次往后移动<code>k%nums.length</code>位, 取出目标位置的值, 赋上原位置的值, 如图所示:<br> <img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E7%8E%AF%E5%BD%A2%E6%97%8B%E8%BD%AC.png" alt="环形旋转"><br> 但是如果<code>nums.length%k=0</code>, 也就是数组长度为k的倍数时会陷入死循环, 就有以下两种解决方法:<ol>
<li><p>使用一个数组记录已经处理过的位置, 使用布尔类型的数组可能稍微方便一点</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>,a = <span class="number">0</span>, exchange = <span class="number">0</span>, count = <span class="number">0</span>, len = nums.length;</span><br><span class="line">       <span class="type">boolean</span>[] arr = <span class="keyword">new</span> <span class="title class_">boolean</span>[len];</span><br><span class="line">       k %= len;</span><br><span class="line">       <span class="keyword">if</span>(nums == <span class="literal">null</span>||len ==<span class="number">1</span>||k == <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       exchange = nums[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">       	<span class="keyword">if</span>(arr[a])&#123;</span><br><span class="line">               a = (a + <span class="number">1</span>)%len;</span><br><span class="line">               exchange = nums[a];</span><br><span class="line">               i--;</span><br><span class="line">      		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       		a = (a+k)%len;</span><br><span class="line">           	temp = nums[a];</span><br><span class="line">           	nums[a] = exchange;</span><br><span class="line">           	exchange = temp;</span><br><span class="line">           	arr[a] = <span class="literal">true</span>;          </span><br><span class="line">       	&#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p> <a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2skh7/?discussion=x7EjsX">来源</a></p>
</li>
<li><p>(真正的原地算法) 因为第一次出现特殊情况时<code>nums.length%k=0</code>, 也就是说起始循环位置——索引为<code>0</code>,而<code> count</code>通过依次自增 , 充当了记录起始循环位置索引的职责, 实现十分巧妙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>,a = <span class="number">0</span>, exchange = <span class="number">0</span>, count = <span class="number">0</span>, len = nums.length;</span><br><span class="line">    k %= len;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="literal">null</span>||len ==<span class="number">1</span>||k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    exchange = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        a = (a+k)%len;</span><br><span class="line">        temp = nums[a];</span><br><span class="line">        nums[a] = exchange;</span><br><span class="line">        exchange = temp;</span><br><span class="line">        <span class="keyword">if</span>(a%len == count)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            a = count;</span><br><span class="line">            exchange = nums[a%len];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	 </span><br></pre></td></tr></table></figure>
<p> <a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/x2skh7/?discussion=iInPDl">来源</a></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数组</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习（题解）</title>
    <url>/2024/08/18/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A02%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习-题解"><a href="#算法学习-题解" class="headerlink" title="算法学习(题解)"></a>算法学习(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 <code>[−2^31,  2^31 − 1]</code> ，就返回 0。<br>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure>
<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><ol>
<li>想要实现反转就要将每个数字提出来，于是可以用<code>%</code>循环除以元数据<code>10</code>来取余数；</li>
<li>然后可以将取到的每一位数存到数组里面最后再遍历输出，但因为最后都要加起来，因此直接累加</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> x % <span class="number">10</span>;<span class="comment">//为源数据</span></span><br><span class="line">reverse = reverse * <span class="number">10</span> + t;<span class="comment">//reverse为返回值</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>还要判断反转后是否超出范围</li>
</ol>
<p>​     (1)直接用范围极值用<code>if</code>进行判断；</p>
<p>​     (2)因为超出范围运算无效，可以逆向运算返回去比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newRes</span> <span class="operator">=</span> res * <span class="number">10</span> + t;</span><br><span class="line">            <span class="keyword">if</span> ((newRes - t) / <span class="number">10</span> != res)<span class="comment">//如果数字溢出，直接返回0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            res = newRes;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：数据结构和算法</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnx13t/?discussion=ukHfZx">链接</a><br>               if语句中还可以判断余数是否相等;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">newRes % <span class="number">10</span> != x%<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>​     (3)还可以直接定义长整型，再强换成整型比较数值是否相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res == res ? (<span class="type">int</span>) res : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：数据结构和算法</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnx13t/?discussion=ukHfZx">链接</a></p>
]]></content>
      <categories>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习（题解）</title>
    <url>/2024/08/19/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A03%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习-题解"><a href="#算法学习-题解" class="headerlink" title="算法学习(题解)"></a>算法学习(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个 n × n 的二维矩阵<code>matrix</code>表示一个图像。请你将图像顺时针旋转 90 度。你必须在<code>原地</code>旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],</span><br><span class="line">               [4,5,6],</span><br><span class="line">               [7,8,9]]</span><br><span class="line">输出：matrix = [[7,4,1],</span><br><span class="line">               [8,5,2],</span><br><span class="line">               [9,6,3]]</span><br></pre></td></tr></table></figure>
<h2 id="3-思路（原地算法）"><a href="#3-思路（原地算法）" class="headerlink" title="3.思路（原地算法）"></a>3.思路（原地算法）</h2><ol>
<li>分析可知，顺时针旋转90度就是每四个元素一组，依次往后挪一个位置，比如实例中<code>(0,1)</code>到<code>(1,2)</code>到<code>(2,1)</code>到<code>(1,0)</code>，中间元素则不必理会；<br> <img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/image-20240819171917250.png" alt="旋转数组"></li>
<li>为了找出普遍规律，每次的位置变化都可以看做目标元素围绕着顶点旋转后进行了一次平移<br> <img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/image-20240819173447630.png" alt="旋转图像"><br> 而每次平移的长度就是数组长度-1-当前位置索引即为<code>len-1-i</code>或者<code>len-1-j</code>；</li>
<li>因为是四个元素一个循环，所以只需要遍历一半行数，所需遍历的列数在两个对角线范围内；<br><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/image-20240819174529415.png" alt="遍历"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len/<span class="number">2</span>;i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i ; j &lt; len-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>最后就是四个元素一组进行的循环，因没有规律可言，选择直接把四个写出来；<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len/<span class="number">2</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i ; j &lt; len-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> len-j-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> len-i-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[x][i];</span><br><span class="line">            matrix[x][i] = matrix[y][x];</span><br><span class="line">            matrix[y][x] = matrix[j][y];</span><br><span class="line">            matrix[j][y] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnhhkv/?discussion=55PjY0">链接</a></li>
</ol>
]]></content>
      <categories>
        <category>旋转图像</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习4（题解）</title>
    <url>/2024/08/20/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A04%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习-题解"><a href="#算法学习-题解" class="headerlink" title="算法学习(题解)"></a>算法学习(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个只包含有小写字母字符串<code>s</code>，找到它的第一个不重复的字符，并返回它的索引 。如果不存在，则返回<code>-1</code>。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;loveleetcode&quot;</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: s = &quot;aabb&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure>
<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><ol>
<li>首先把字符串用<code>toCharArray()</code>转换成字符数组<code>chars</code>，当然也可以老老实实的用<code>charAt()</code>；</li>
<li>我们是要找出第一个不重复的字母，被选中的字母都会直接或间接的与所有字母比较，因此我们<br> 选择自制一个哈希表来统计并区分字母是否重复，因为无法第一时间返回未重复字母，所以事后还要进行一次遍历；</li>
<li>创建哈希表有以下两种思路：<ol>
<li>（1）本人这种方法比较繁杂，首先创建一个<code>s.length()</code>大小的数组；<br>（2）通过将字母转换成数字并进行取余运算，从而确定该字母在<code>arr</code>中的储存位置；<br>（3）统计到字母重复的会在布尔数组<code>arr2</code>中经行标记;<br>（4）最后再对没有被标记过的进行遍历，找出索引最小的并返回，没有则返回<code>-1</code>。</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> []arr = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line"><span class="type">boolean</span> []arr2 = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> chars[i];</span><br><span class="line">    t %= s.length();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[t] == -<span class="number">1</span>)&#123;</span><br><span class="line">            arr[t] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == s.charAt(arr[t]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!arr2[t])&#123;</span><br><span class="line">                arr2[t] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                t = (t+<span class="number">1</span>)%s.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>（1）大佬的做法：因为26个字母嘛，所以直接创建一个大小为26的整型数组<code>count</code>；<br>（2）巧妙的来了，<code>chars[i] - &#39;a&#39;</code>计算出每个字母的位置，一个萝卜一个坑地统计出现次数；<br>（3）最后再用字符数组<code>chars</code>开始依次遍历找出值为<code>1</code>的<code>count</code>所对应字母的索引，若没找到则返回<code>-1</code>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="comment">//先统计每个字符出现的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">            count[chars[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="comment">//然后在遍历字符串s中的字符，如果出现次数是1就直接返回</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">            <span class="keyword">if</span> (count[chars[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：数据结构和算法</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xn5z8r/?discussion=6TyKA7">链接</a></p>
]]></content>
      <categories>
        <category>字符串中唯一字符</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习5（题解）</title>
    <url>/2024/08/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A05%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习-题解"><a href="#算法学习-题解" class="headerlink" title="算法学习(题解)"></a>算法学习(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你两个字符串<code>haystack</code>和<code>needle</code>，请你在<code>haystack</code>字符串中找出<code>needle</code>字符串的第一个匹配项的下标（下标从 0 开始）。如果<code>needle</code>不是<code>haystac</code>的一部分，则返回 <code>-1</code>。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure>
<p>实例二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure>
<p>实例三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;imimmip&quot;, needle = &quot;immip&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>鄙人的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; haystack.length();i++)&#123;</span><br><span class="line">        <span class="comment">/* 找到第一个相等的字符位置 */</span></span><br><span class="line">        <span class="keyword">if</span>(haystack.charAt(i) == needle.charAt(len))&#123;</span><br><span class="line">            len = i + needle.length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; haystack.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(needle.length() == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 查找剩下的*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; x &lt; len; x++, j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(haystack.charAt(x) != needle.charAt(j))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/* Found whole string. */</span></span><br><span class="line">                <span class="keyword">if</span> (x == len-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>官方的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">sl</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cl</span> <span class="operator">=</span> needle.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cl &gt; sl) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> needle.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> sl-cl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="comment">/* 找到第一个相等的字符位置 */</span></span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) != first) &#123;</span><br><span class="line">                <span class="keyword">while</span> (++i &lt;= max &amp;&amp; haystack.charAt(i) != first);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 查找剩下的*/</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= max) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j+cl-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span>  <span class="number">1</span>; j &lt; end &amp;&amp; haystack.charAt(j) == needle.charAt(k); j++, k++);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j == end) &#123;</span><br><span class="line">                    <span class="comment">/* Found whole string. */</span></span><br><span class="line">                    <span class="keyword">return</span> i ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>
<h2 id="4-思路"><a href="#4-思路" class="headerlink" title="4.思路"></a>4.思路</h2><p>鄙人的方法和<code>leetcode</code>官方题解的方法差不多，解法就有些许不同。</p>
<ol>
<li>首先通过遍历<code>haystack</code>与<code>needle</code>的第一个字符进行比较找出第一个相等的字母，找不到的话我直接返回<code>-1</code>，<code>leetcode</code>则做了预处理；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(len &gt; haystack.length())&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> sl-cl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= max; i++) &#123;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>接下来就是匹配剩下的字母，匹配成功的话就返回开始索引，匹配不成功的话则继续进行下一次循环，设置外循环的原因是为了处理<code>实例三</code>这类情况——开头字母重复出现，需要依次遍历排除；</li>
<li>匹配成功的条件都是第二个循环中的索引值是否增加了<code>needle</code>字符个长度，区别在于<code>leetcode</code>在循环外进行判断，而我在循环中进行判断，效率更低而且还要额外排除<code>needle</code>长度为<code>1</code>的情况，显得多此一举。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(needle.length() == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>实现 strStr()</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习6（题解）</title>
    <url>/2024/08/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A06%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习6-题解"><a href="#算法学习6-题解" class="headerlink" title="算法学习6(题解)"></a>算法学习6(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>「外观数列」是一个数位字符串序列，由递归公式定义：</p>
<ul>
<li>countAndSay(1) &#x3D; “1”</li>
<li>countAndSay(n) 是 countAndSay(n-1) 的行程长度编码。</li>
</ul>
<p><code>行程长度编码（RLE）</code>是一种字符串压缩方法，其工作原理是通过将连续相同字符（重复两次或更多次）替换为字符重复次数（运行长度）和字符的串联。例如，要压缩字符串<code>&quot;3322251&quot;</code>，我们将<code>&quot;33&quot;</code>用<code>&quot;23&quot;</code>替换，将<code>&quot;222&quot;</code>用<code>&quot;32&quot;</code>替换，将<code>&quot;5&quot;</code>用<code>&quot;15&quot;</code>替换并将<code>&quot;1&quot;</code>用<code>&quot;11&quot;</code>替换。因此压缩后字符串变为<code>&quot;23321511&quot;</code>。</p>
<p>给定一个整数<code>n</code> ，返回 外观数列的第<code>n</code>个元素（1 &lt;&#x3D; n &lt;&#x3D; 30）。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：&quot;1211&quot;</span><br><span class="line">解释：</span><br><span class="line">countAndSay(1) = &quot;1&quot;</span><br><span class="line">countAndSay(2) = &quot;1&quot; 的行程长度编码 = &quot;11&quot;</span><br><span class="line">countAndSay(3) = &quot;11&quot; 的行程长度编码 = &quot;21&quot;</span><br><span class="line">countAndSay(4) = &quot;21&quot; 的行程长度编码 = &quot;1211&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>鄙人的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>, temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="comment">//人为掠过此种情况</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                a = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对s1遍历处理获取值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; a.length()-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="comment">// 设定计数器 计算同一个数字出现的次数 count</span></span><br><span class="line">                <span class="keyword">if</span>(a.charAt(j) == a.charAt(j+<span class="number">1</span>))&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="comment">//末位数字处理</span></span><br><span class="line">                    <span class="keyword">if</span>(j == a.length()-<span class="number">2</span>)&#123;</span><br><span class="line">                        temp += count+<span class="string">&quot;&quot;</span>+a.charAt(j);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                	<span class="comment">// 不符合，记录下</span></span><br><span class="line">                    temp += count+<span class="string">&quot;&quot;</span>+a.charAt(j);</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//末位数字处理</span></span><br><span class="line">                <span class="keyword">if</span>(j == a.length()-<span class="number">2</span>)&#123;</span><br><span class="line">                    temp += <span class="number">1</span>+<span class="string">&quot;&quot;</span>+a.charAt(j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//归零</span></span><br><span class="line">            a = temp;</span><br><span class="line">            temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/?discussion=6HeAwg">大佬的</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 假设我们获得上一次的结果为 s1 = 112213</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> countAndSay(n - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义结果</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 对s1遍历处理获取值</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">local</span> <span class="operator">=</span> s1.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 设定计数器 计算同一个数字出现的次数 count</span></span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i) == local)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不符合，记录下</span></span><br><span class="line">                result.append(count);</span><br><span class="line">                result.append(local);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                local = s1.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.append(count);</span><br><span class="line">        result.append(local);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：桂继宏</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>

<h2 id="4-思路"><a href="#4-思路" class="headerlink" title="4.思路"></a>4.思路</h2><p>鄙人的用的迭代，代码十分臃肿； 大佬用的递归——相当于代替了迭代的外层循环，也避免的很多特殊情况。</p>
<ol>
<li>两种方法都是通过<code>count</code>计数，直到遇到不同的数字就进行记录，区别在于我是对<code>n</code>中两两挨着的数字进行比较，所以就出现了数组索引越界的问题：在<code>对s1遍历处理获取值</code>之前，小于两位的数字需要额外手动处理、在<code>对s1遍历处理获取值</code>中末位数字也需要分开处理；</li>
<li>而另一种方法通过依次遍历比较则很好的避免了这些问题，在处理末位数字时也只需要在循环结束后再进行一次赋值；</li>
<li>赋值时我用的字符串加减，而第二种用<code>api</code>，区别不大。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">local</span> <span class="operator">=</span> s1.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 对s1遍历处理获取值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i) == local)&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//result.append(count);</span></span><br><span class="line">    <span class="comment">//result.append(local);</span></span><br><span class="line">    count = <span class="number">1</span>;</span><br><span class="line">    local = s1.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上题目及实列代码均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a></p>
]]></content>
      <categories>
        <category>外观数列</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习7（题解）</title>
    <url>/2024/08/27/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A07%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习7-题解"><a href="#算法学习7-题解" class="headerlink" title="算法学习7(题解)"></a>算法学习7(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串<code>&quot;&quot;</code>。</p>
<p><code>strs</code>中只有小写英文字母。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure>

<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>鄙人的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>, temp = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 找出最小长度的的字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; strs.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.length() &gt; strs[i+<span class="number">1</span>].length())&#123;</span><br><span class="line">            temp = strs[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否是共同前缀</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; temp.length();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; strs.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.charAt(i) != strs[j].charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> re;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代</span></span><br><span class="line">        re += temp.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnmav1/?discussion=RTNpup">大佬的</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">      <span class="comment">// 找出最小长度的的字符串</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">minLen</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">      <span class="type">String</span> <span class="variable">minStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">          <span class="keyword">if</span> (minLen &gt; str.length()) &#123;</span><br><span class="line">              minLen = str.length();</span><br><span class="line">              minStr = str;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 是否是共同前缀</span></span><br><span class="line">      <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">          <span class="keyword">while</span> (minLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">//不断缩小范围判断</span></span><br><span class="line">              <span class="type">boolean</span> <span class="variable">start</span> <span class="operator">=</span> str.startsWith(minStr.substring(<span class="number">0</span>, minLen));</span><br><span class="line">              <span class="keyword">if</span> (start) &#123;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  minLen--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> minStr.substring(<span class="number">0</span>, minLen);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  作者：Snorlax</span><br><span class="line">  来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>

<h2 id="4-思路"><a href="#4-思路" class="headerlink" title="4.思路"></a>4.思路</h2><p>鄙人的用的双层<code>for</code>循环，效率比较低； 大佬虽然用的<code>for</code>内嵌<code>while</code>，但是由于条件设置地巧妙并且对<code>API</code>运用的十分恰当，要高效不少。</p>
<ol>
<li>首先，为了避免循环中索引<strong>越界</strong>，都需要先行找出<code>strs</code>中长度最小的字符串，一个简单的<code>for</code>循环即可搞定，增强<code>for</code>循环看起来更为简洁；</li>
<li>接下来两种方法的对字符串判断方式不同，我是将最小的字符串的每一个字母依次与其它字符串相同位置的字母进行比较，用<code>re</code>不断迭代记录，直到出现不一样的；</li>
<li>而第二种则是不断用截取最小长度字符串的<code>len</code>个长度的字符与数组中每一个元素的前缀进行比较，用<code>startsWith()</code>和<code>substring()</code>分别完成了<code>比较</code>和<code>截取</code>的任务.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">	<span class="keyword">while</span> (minLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="comment">//不断缩小范围判断</span></span><br><span class="line">    	<span class="type">boolean</span> <span class="variable">start</span> <span class="operator">=</span> str.startsWith(minStr.substring(<span class="number">0</span>, minLen));</span><br><span class="line">    	<span class="keyword">if</span> (start) &#123;</span><br><span class="line">        	<span class="keyword">break</span>;</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	minLen--;</span><br><span class="line">    	&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="comment">//返回minLen个长度的前缀</span></span><br><span class="line"> 	<span class="keyword">return</span> minStr.substring(<span class="number">0</span>, minLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上题目及实列代码均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>最长公共前缀</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习8（题解）</title>
    <url>/2024/08/28/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A08%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习8-题解"><a href="#算法学习8-题解" class="headerlink" title="算法学习8(题解)"></a>算法学习8(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个链表，删除链表的倒数第<code>n</code>个结点，并且返回链表的头结点。</p>
<blockquote>
<ul>
<li>注：删除节点并不是指从内存中删除它，而是让指定节点的值不应该存在于链表中。</li>
</ul>
</blockquote>
<p><strong>进阶</strong>：你能尝试使用一趟扫描实现吗？</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>鄙人的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求链表的长度</span></span><br><span class="line">    <span class="keyword">while</span>(tempNode != <span class="literal">null</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        tempNode = tempNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    count -= n;</span><br><span class="line">    <span class="comment">// 说明删除的是头节点</span></span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    tempNode = head;</span><br><span class="line">     <span class="comment">//获取要删除链表的前一个结点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        tempNode = tempNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//完成链表删除</span></span><br><span class="line">    tempNode.next = tempNode.next.next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xn2925/?discussion=9Dqd9Q">大佬的</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> length(head, n);</span><br><span class="line">        <span class="comment">// 说明删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span> (pos == n)</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取节点所在位置，逆序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(ListNode node, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> length(node.next, n) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//获取要删除链表的前一个结点，就可以完成链表的删除</span></span><br><span class="line">        <span class="keyword">if</span> (pos == n + <span class="number">1</span>)</span><br><span class="line">            node.next = node.next.next;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：数据结构和算法</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>

<h2 id="4-思路"><a href="#4-思路" class="headerlink" title="4.思路"></a>4.思路</h2><p>鄙人的用的最容易想到的<code>for</code>循环； 大佬用的递归，也就是所谓的的一次扫描，叹服。</p>
<ol>
<li>无论哪种方法，最先想到的都是获取链表的长度，可以用<code>for</code>也可以用<strong>递归</strong>;</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求链表的长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tempNode != <span class="literal">null</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        tempNode = tempNode.next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> length(head.next) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接着我就用<code>for</code>循环遍历找到目标节点的前一个位置，让它指向下下个节点即可，删除头节点没有了前置节点需要特殊处理，直接返回<code>head.next</code>作为链表的头节点，间接删除掉了头节点；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tempNode.next = tempNode.next.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>而用递归求链表长度时，因为递归是逆向求和，也就是从后往前计算，那么求倒数位置的节点可谓正中下怀，只需要在后面添加<code>if</code>判断进行计数的<code>pos</code>与<code>n</code>的关系即可进行删除。<br>至于如何处理删除首节点，因为<code>pos</code>不可能大于<code>n</code>，所以没有前置节点会被自动过滤，最后只需判断返回链表长度与<code>n</code>的关系即可删除首节点，妙哉。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pos == n)</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上题目及实列代码均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>删除链表的倒数第N个节点</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习9（题解）</title>
    <url>/2024/08/31/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A09%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习9-题解"><a href="#算法学习9-题解" class="headerlink" title="算法学习9(题解)"></a>算法学习9(题解)</h1><blockquote>
<p><strong>声明：本文为转载文章，仅用来学习交流，详情见文末</strong></p>
</blockquote>
<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你单链表的头节点<code>head</code>，请你反转链表，并返回反转后的链表。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><h3 id="1-使用栈解决"><a href="#1-使用栈解决" class="headerlink" title="1.使用栈解决"></a>1.使用栈解决</h3><p>链表的反转是老生常谈的一个问题了，同时也是面试中常考的一道题。最简单的一种方式就是使用栈，因为栈是先进后出的。实现原理就是把链表节点一个个入栈，当全部入栈完之后再一个个出栈，出栈的时候在把出栈的结点串成一个新的链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//把链表节点全部摘掉放到栈中</span></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(head);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> node;</span><br><span class="line">    <span class="comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        node.next = tempNode;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一个结点就是反转前的头结点，一定要让他的next</span></span><br><span class="line">    <span class="comment">//等于空，否则会构成环</span></span><br><span class="line">    node.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> dummy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-递归解决"><a href="#2-递归解决" class="headerlink" title="2.递归解决"></a>2.递归解决</h3><p>这篇文章是大佬对递归的理解，里面讲了递归的模板，终止条件，递归调用，逻辑处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(参数<span class="number">0</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    逻辑处理（可能有，也可能没有，具体问题具体分析）</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">reverse</span> <span class="operator">=</span> reverseList(参数<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    逻辑处理（可能有，也可能没有，具体问题具体分析）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终止条件就是链表为空，或者是链表没有尾结点的时候，直接返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> head;</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/link/?target=https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&mid=2247487910&idx=1&sn=2670aec7139c6b98e83ff66114ac1cf7&chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&token=910002910&lang=zh_CN#rd">详情见原文</a></p>
<p>递归调用是要从当前节点的下一个结点开始递归。逻辑处理这块是要把当前节点挂到递归之后的链表的末尾，看下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">//保存当前节点的下一个结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="comment">//从当前节点的下一个结点开始递归调用</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">reverse</span> <span class="operator">=</span> reverseList(next);</span><br><span class="line">    <span class="comment">/*reverse是反转之后的链表，因为函数reverseList</span></span><br><span class="line"><span class="comment">    表示的是对链表的反转，所以反转完之后next肯定</span></span><br><span class="line"><span class="comment">    是链表reverse的尾结点，然后我们再把当前节点</span></span><br><span class="line"><span class="comment">    head挂到next节点的后面就完成了链表的反转。*/</span></span><br><span class="line">    next.next = head;</span><br><span class="line">    <span class="comment">//这里head相当于变成了尾结点，尾结点都是为空的,否则会构成环</span></span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种递归往下传递的时候基本上没有逻辑处理，当往回反弹的时候才开始处理，也就是从链表的尾端往前开始处理的。我们还可以再来改一下，在链表递归的时候从前往后处理，处理完之后直接返回递归的结果，这就是所谓的尾递归，这种运行效率要比上一种好很多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(head, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">reverseListInt</span><span class="params">(ListNode head, ListNode newHead)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">    head.next = newHead;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(next, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看一个神奇之处，尾递归虽然也会不停的压栈，但由于最后返回的是递归函数的值，所以在返回的时候都会一次性出栈，不会一个个出栈这么慢。但如果我们再来改一下，像下面代码这样又会一个个出栈了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(head, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">reverseListInt</span><span class="params">(ListNode head, ListNode newHead)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">    head.next = newHead;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> reverseListInt(next, head);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;。</span><br></pre></td></tr></table></figure>


<blockquote>
<p>以上题目及实列均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a><br>代码摘录至作者：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnnhm6/?discussion=0NDu5u">数据结构和算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>反转链表</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习10（题解）</title>
    <url>/2024/09/07/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A010%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习10-题解"><a href="#算法学习10-题解" class="headerlink" title="算法学习10(题解)"></a>算法学习10(题解)</h1><blockquote>
<p><strong>声明：本文为转载文章，仅用来学习交流，详情见文末</strong></p>
</blockquote>
<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个链表的头节点<code>head</code>，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意<code>pos</code>不作为参数进行传递 。仅仅是为了标识链表的实际情况。</strong></p>
<p>如果链表中存在环 ，则返回<code>true</code>。 否则，返回<code>false</code>。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.png" alt="环形链表"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><h3 id="1-快慢指针解决"><a href="#1-快慢指针解决" class="headerlink" title="1.快慢指针解决"></a>1.快慢指针解决</h3><p>判断链表是否有环应该是老生常谈的一个话题了，最简单的一种方式就是快慢指针，慢指针针每次走一步，快指针每次走两步，如果相遇就说明有环，如果有一个为空说明没有环。代码比较简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//快慢两个指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//慢指针每次走一步</span></span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="comment">//快指针每次走两步</span></span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="comment">//如果相遇，说明有环，直接返回true</span></span><br><span class="line">        <span class="keyword">if</span> (slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则就是没环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从原理上来讲只要快（m）慢（n）指针每次走的步数不同（m !&#x3D; n），那么当差值刚好到环长度的最小公倍数时就会相遇</p>
<h3 id="2-先反转再比较"><a href="#2-先反转再比较" class="headerlink" title="2.先反转再比较"></a>2.先反转再比较</h3><p>如果有环，那么链表反转之后，原来的头结点和反转之后的头结点一定是同一个，依次反转后，指针会回到头节点</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82.png" alt="环形链表2"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//新链表</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//先保存访问的节点的下一个节点，保存起来</span></span><br><span class="line">        <span class="comment">//留着下一步访问的</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//每次访问的原链表节点都会成为新链表的头结点，</span></span><br><span class="line">        <span class="comment">//其实就是把新链表挂到访问的原链表节点的</span></span><br><span class="line">        <span class="comment">//后面就行了</span></span><br><span class="line">        head.next = newHead;</span><br><span class="line">        <span class="comment">//更新新链表</span></span><br><span class="line">        newHead = head;</span><br><span class="line">        <span class="comment">//重新赋值，继续访问</span></span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回新链表</span></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">rev</span> <span class="operator">=</span> reverseList(head);</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="literal">null</span> &amp;&amp; head.next != <span class="literal">null</span> &amp;&amp; rev == head) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>以上题目及实列均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a><br>代码摘录至作者：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnwzei/?discussion=GfAWpk">数据结构和算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>环形链表</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习8（题解）</title>
    <url>/2024/09/16/2024-08-28-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A011%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习11-题解"><a href="#算法学习11-题解" class="headerlink" title="算法学习11(题解)"></a>算法学习11(题解)</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你二叉树的根节点 <code>root</code>，返回其节点值的<strong>层序遍历</strong> 。（即逐层地，从左到右访问所有节点）。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>

<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>鄙人的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; q1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    q1.push(root);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        List&lt;TreeNode&gt; l1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; l2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!q1.empty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">t1</span> <span class="operator">=</span> q1.pop();</span><br><span class="line">            l1.add(t1);</span><br><span class="line">            l2.add(t1.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(l2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l1.size()-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.get(i).right != <span class="literal">null</span>)&#123;</span><br><span class="line">                q1.push(l1.get(i).right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l1.get(i).left != <span class="literal">null</span>)&#123;</span><br><span class="line">                q1.push(l1.get(i).left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnldjj/?discussion=UHhgqh">大佬的</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点入队</span></span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="comment">//如果队列不为空就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//BFS打印，levelNum表示的是每层的结点数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">levelNum</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="comment">//subList存储的是每层的结点值</span></span><br><span class="line">        List&lt;Integer&gt; subList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; levelNum; i++) &#123;</span><br><span class="line">            <span class="comment">//出队</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            subList.add(node.val);</span><br><span class="line">            <span class="comment">//左右子节点如果不为空就加入到队列中</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把每层的结点值存储在res中，</span></span><br><span class="line">        res.add(subList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：数据结构和算法</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure>
<h2 id="4-知识点"><a href="#4-知识点" class="headerlink" title="4.知识点"></a>4.知识点</h2><h3 id="1-BFS-宽度优先搜索-又称广度优先搜索"><a href="#1-BFS-宽度优先搜索-又称广度优先搜索" class="headerlink" title="1.BFS(宽度优先搜索(又称广度优先搜索))"></a>1.BFS(宽度优先搜索(又称广度优先搜索))</h3><p>他的访问顺序是：先访问上一层，在访问下一层，一层一层的往下访问，所以上图前序遍历的结果是：A→B→C→D→E→F</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88.png" alt="广度优先"></p>
<p>实现代码比较简单，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(TreeNode tree)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (tree == <span class="literal">null</span>)</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     LinkedList&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//链表，这里我们可以把它看做队列</span></span><br><span class="line">     list.add(tree);<span class="comment">//相当于把数据加入到队列尾部</span></span><br><span class="line">     <span class="keyword">while</span> (!list.isEmpty()) &#123;</span><br><span class="line">         <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> list.poll();<span class="comment">//poll方法相当于移除队列头部的元素</span></span><br><span class="line">         System.out.println(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">            list.add(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">           list.add(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-NFS深度优先搜索"><a href="#2-NFS深度优先搜索" class="headerlink" title="2.NFS深度优先搜索"></a>2.NFS深度优先搜索</h3><p>顾名思义，先遍历到最大深度，他的访问顺序是：先访根节点，然后左结点，一直往下，直到最左结点没有子节点的时候然后往上退一步到父节点，然后父节点的右子节点在重复上面步骤……<br>所以上图前序遍历的结果是：A→B→D→E→C→F</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88.png" alt="深度优先"></p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">treeDFS</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.println(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>详情见<a href="https://leetcode.cn/link/?target=https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&mid=2247487028&idx=1&sn=e06a0cd5760e62890e60e43a279a472b&chksm=fb419d14cc36140257eb220aaeac182287b10c3cab5c803ebd54013ee3fc120d693067c2e960&scene=21#wechat_redirect">373，数据结构-6,树</a></p>
<h2 id="5-思路"><a href="#5-思路" class="headerlink" title="5.思路"></a>5.思路</h2><ol>
<li>题目要求返回值类型为<code>list</code>，<code>list</code>指定返回<code>int</code>类型，这一点首先要搞清楚；</li>
<li>我用的是栈，每一层最右边开始进栈，到最左边开始出栈，把他们依次存放到<code>l2</code>中，然后为了继续往下一层遍历，我把它们放到<code>l1</code>中进行遍历判断，但这样明显显得太笨拙了；</li>
<li>大佬用双向链表<code>ArrayList</code>实现的队列，先进的先出，然乎对每一个移出列的项判断左右孩子，然后入列即可。</li>
</ol>
<blockquote>
<p>以上题目及实列代码均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>二叉树的层序遍历</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习11（题解）</title>
    <url>/2024/09/22/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A011%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习11-题解"><a href="#算法学习11-题解" class="headerlink" title="算法学习11(题解)"></a>算法学习11(题解)</h1><blockquote>
<p><strong>声明：本文为转载文章，仅用来学习交流，详情见文末</strong></p>
</blockquote>
<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个整数数组<code>nums</code>，其中元素已经按<strong>升序</strong>排列，请你将其转换为一棵<strong>平衡</strong>二叉搜索树。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-10,-3,0,5,9]</span><br><span class="line">输出：[0,-3,9,-10,null,5]</span><br><span class="line">解释：[0,-10,5,null,-3,null,9] 也将被视为正确答案</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,3]</span><br><span class="line">输出：[3,1]</span><br><span class="line">解释：[1,null,3] 和 [3,1] 都是高度平衡二叉搜索树。</span><br></pre></td></tr></table></figure>

<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><h3 id="递归解决"><a href="#递归解决" class="headerlink" title="递归解决"></a>递归解决</h3><p>题中说了要转换为一棵高度平衡的二叉搜索树，并且数组又是排过序的，这就好办了，我们从数组的中间节点开始找起，每次取数组中间的值比如m作为当前节点，m前面的值作为他左子树的结点值，m后面的值作为他右子树的节点值，所以最后采用与递归后序遍历类似的方法递归。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> sortedArrayToBST(num, <span class="number">0</span>, num.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] num, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(num[mid]);</span><br><span class="line">    root.left = sortedArrayToBST(num, start, mid - <span class="number">1</span>);<span class="comment">//（一）</span></span><br><span class="line">    root.right = sortedArrayToBST(num, mid + <span class="number">1</span>, end);<span class="comment">//(二)</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>选取中间节点的左右节点时需要注意，选取中间节点的左节点时要分别选取排在中间节点之前所有节点的中间节点，如注释<code>(一)</code>所示，右节点<code>(二)</code>同理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root.left = sortedArrayToBST(num, start, mid - <span class="number">1</span>);<span class="comment">//（一）</span></span><br><span class="line">root.right = sortedArrayToBST(num, mid + <span class="number">1</span>, end);<span class="comment">//(二)</span></span><br></pre></td></tr></table></figure>
<p>递归开始往后前处理数据条件就是向左退无可退，向右进无可进，也就是<code>start &gt; end</code>时。</p>
<blockquote>
<p>以上题目及实列均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a><br>代码摘录至作者：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xninbt/?discussion=TdRJ9A">数据结构和算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>将有序数组转换为二叉搜索树</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习12（题解）</title>
    <url>/2024/09/22/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A012%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="算法学习12-题解"><a href="#算法学习12-题解" class="headerlink" title="算法学习12(题解)"></a>算法学习12(题解)</h1><blockquote>
<p><strong>声明：本文为转载文章，仅用来学习交流，详情见文末</strong></p>
</blockquote>
<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个二叉树的根节点<code>root</code>， 检查它是否轴对称。</p>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="对称二叉树"></p>
<p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实列二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h2><h3 id="递归解决"><a href="#递归解决" class="headerlink" title="递归解决"></a>递归解决</h3><p>判断二叉树是否是对称，需要从子节点开始比较，两个子节点的值必须相同，并且左子节点的右子节点（如果有）必须等于右子节点的左子节点，左子节点的左子节点必须等于右子节点的右子节点，所以需要二叉树左右两部分通过中序遍历进行比较。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//从两个子节点开始判断</span></span><br><span class="line">    <span class="keyword">return</span> isSymmetricHelper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetricHelper</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">//如果左右子节点都为空，说明当前节点是叶子节点，返回true</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//如果当前节点只有一个子节点或者有两个子节点，但两个子节点的值不相同，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> || right == <span class="literal">null</span> || left.val != right.val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//然后左子节点的左子节点和右子节点的右子节点比较，左子节点的右子节点和右子节点的左子节点比较</span></span><br><span class="line">    <span class="keyword">return</span> isSymmetricHelper(left.left, right.right) &amp;&amp; isSymmetricHelper(left.right, right.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从根节点的左右节点同时开始遍历并对节点进行判断，从最外层到达树的底端，也就是当节点左右子节点都为<code>null</code>时到达叶节点，然后开始从后往前递归进行中序遍历。<br>该解法在入栈和出栈时都对数据进行了逻辑处理，所以不属于任何一种遍历方式， 入栈时相当于前序遍历，出栈是中序遍历。</p>
<blockquote>
<p>以上题目及实列均来自于：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnpvdm/">力扣（LeetCode）</a><br>代码摘录至作者：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xn7ihv/?discussion=QMfbGu">数据结构和算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>对称二叉树</category>
      </categories>
      <tags>
        <tag>算法学习(java)</tag>
      </tags>
  </entry>
  <entry>
    <title>linux运行c++文件</title>
    <url>/2024/09/25/linux%E8%BF%90%E8%A1%8Cc++%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>[toc] </p>
<h1 id="cc1plus-fatal-error-opening-output-file-hello-i-不允许的操作compilation-terminated"><a href="#cc1plus-fatal-error-opening-output-file-hello-i-不允许的操作compilation-terminated" class="headerlink" title="cc1plus:fatal error: opening output file hello.i:不允许的操作compilation terminated"></a>cc1plus:fatal error: opening output file hello.i:不允许的操作compilation terminated</h1><h2 id="1-报错"><a href="#1-报错" class="headerlink" title="1.报错"></a>1.报错</h2><p>若果你是使用的虚拟机然后操作的挂载在Windows上的文件，在预编译.c&#x2F;.cpp文件时出现了这个错误，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E9%A2%84%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99.png" alt="预编译报错"></p>
<p>那么就是操作权限的问题。</p>
<h2 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h2><p>用<code>mount</code>检查文件的挂载状态，看到是<code>rw</code>可读写权限而不是<code>ro</code>只读<br><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E6%8C%82%E5%9C%A8%E7%8A%B6%E6%80%81.png" alt="挂在状态"><br>按理来说应该没问题啊，在我百思不得其解的时候我突然想到那只能是挂载端Windows对文件的操作进行了限制</p>
<p><img src="https://cdn.jsdelivr.net/gh/yinyyingdestar/myblog@main/img/%E6%93%8D%E4%BD%9C%E6%9D%83%E9%99%90.png" alt="操作权限"></p>
<p>果然，没有完全控制文件的权限，勾上后点击<code>应用</code>保存即可，问题迎刃而解。</p>
]]></content>
      <categories>
        <category>运行c++程序</category>
      </categories>
      <tags>
        <tag>linux学习</tag>
      </tags>
  </entry>
</search>
